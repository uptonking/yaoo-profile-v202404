import{_ as e,c as t,o,a7 as a}from"./chunks/framework.CueMD8Uh.js";const f=JSON.parse('{"title":"Configuring UnoCSS","description":"Configurations are what make UnoCSS powerful.","frontmatter":{"title":"Configuring UnoCSS","description":"Configurations are what make UnoCSS powerful.","outline":"deep"},"headers":[],"relativePath":"config/index.md","filePath":"config/index.md","lastUpdated":1710412421000}'),r={name:"config/index.md"},s=a('<h1 id="configuring-unocss" tabindex="-1">Configuring UnoCSS <a class="header-anchor" href="#configuring-unocss" aria-label="Permalink to &quot;Configuring UnoCSS&quot;">​</a></h1><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>Configurations are what make UnoCSS powerful.</p><ul><li><a href="/yaoo-showcase-profile-v202404/config/rules">Rules</a> - Define atomic CSS utilities</li><li><a href="/yaoo-showcase-profile-v202404/config/shortcuts">Shortcuts</a> - Combine multiple rules into a single shorthand.</li><li><a href="/yaoo-showcase-profile-v202404/config/theme">Theme</a> - Define theme variables.</li><li><a href="/yaoo-showcase-profile-v202404/config/variants">Variants</a> - Apply custom conventions to rules.</li><li><a href="/yaoo-showcase-profile-v202404/config/extractors">Extractors</a> - Define where and how the usage of utilities are extracted.</li><li><a href="/yaoo-showcase-profile-v202404/config/preflights">Preflights</a> - Define global raw CSS.</li><li><a href="/yaoo-showcase-profile-v202404/config/layers">Layers</a> - Define the order of each utilities layer.</li><li><a href="/yaoo-showcase-profile-v202404/config/presets">Presets</a> - Predefined configurations for common use cases.</li><li><a href="/yaoo-showcase-profile-v202404/config/transformers">Transformers</a> - Code transformers to user sources code to support conventions.</li><li><a href="/yaoo-showcase-profile-v202404/config/autocomplete">Autocomplete</a> - Define customized autocomplete suggestions.</li></ul><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><h3 id="rules" tabindex="-1">rules <a class="header-anchor" href="#rules" aria-label="Permalink to &quot;rules&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>Rule&lt;Theme&gt;[]</code></li></ul><p>Rules to generate CSS utilities. Later entries have higher priority.</p><h3 id="shortcuts" tabindex="-1">shortcuts <a class="header-anchor" href="#shortcuts" aria-label="Permalink to &quot;shortcuts&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>UserShortcuts&lt;Theme&gt;</code></li></ul><p>Similar to Windi CSS&#39;s shortcuts, allows you to create new utilities by combining existing ones. Later entries have higher priority.</p><h3 id="theme" tabindex="-1">theme <a class="header-anchor" href="#theme" aria-label="Permalink to &quot;theme&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>Theme</code></li></ul><p>Theme object for shared configuration between rules.</p><h3 id="extendtheme" tabindex="-1">extendTheme <a class="header-anchor" href="#extendtheme" aria-label="Permalink to &quot;extendTheme&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>Arrayable&lt;ThemeExtender&lt;Theme&gt;&gt;</code> Custom functions mutate the theme object.</li></ul><p>It&#39;s also possible to return a new theme object to completely replace the original one.</p><h3 id="variants" tabindex="-1">variants <a class="header-anchor" href="#variants" aria-label="Permalink to &quot;variants&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>Variant&lt;Theme&gt;[]</code></li></ul><p>Variants that preprocess the selectors, having the ability to rewrite the CSS object.</p><h3 id="extractors" tabindex="-1">extractors <a class="header-anchor" href="#extractors" aria-label="Permalink to &quot;extractors&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>Extractor[]</code></li></ul><p>Extractors to handle the source file and output possible classes/selectors. Can be language-aware.</p><h3 id="preflights" tabindex="-1">preflights <a class="header-anchor" href="#preflights" aria-label="Permalink to &quot;preflights&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>Preflight&lt;Theme&gt;[]</code></li></ul><p>Raw CSS injections.</p><h3 id="layers" tabindex="-1">layers <a class="header-anchor" href="#layers" aria-label="Permalink to &quot;layers&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>Record&lt;string, number&gt;</code></li></ul><p>Layer orders. Default to 0.</p><h3 id="outputtocsslayers" tabindex="-1">outputToCssLayers <a class="header-anchor" href="#outputtocsslayers" aria-label="Permalink to &quot;outputToCssLayers&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>boolean | UseCssLayersOptions</code></li><li><strong>Default:</strong> <code>false</code></li></ul><p>Outputs the layers to CSS Cascade Layers.</p><h4 id="csslayername" tabindex="-1">cssLayerName <a class="header-anchor" href="#csslayername" aria-label="Permalink to &quot;cssLayerName&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>(internalLayer: string) =&gt; string | undefined | null</code></li></ul><p>Specifies the name of the CSS layer the internal layer should be output to (can be a sublayer e.g. &quot;mylayer.mysublayer&quot;).</p><p>If <code>undefined</code> is return, the internal layer name wil be used as the CSS layer name. If <code>null</code> is return, the internal layer will not be output to a CSS layer.</p><h3 id="sortlayers" tabindex="-1">sortLayers <a class="header-anchor" href="#sortlayers" aria-label="Permalink to &quot;sortLayers&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>(layers: string[]) =&gt; string[]</code></li></ul><p>Custom function to sort layers.</p><h3 id="presets" tabindex="-1">presets <a class="header-anchor" href="#presets" aria-label="Permalink to &quot;presets&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>(PresetOrFactory&lt;Theme&gt; | PresetOrFactory&lt;Theme&gt;[])[]</code></li></ul><p>Predefined configurations for common use cases.</p><h3 id="transformers" tabindex="-1">transformers <a class="header-anchor" href="#transformers" aria-label="Permalink to &quot;transformers&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>SourceCodeTransformer[]</code></li></ul><p>Custom transformers to the source code.</p><h3 id="blocklist" tabindex="-1">blocklist <a class="header-anchor" href="#blocklist" aria-label="Permalink to &quot;blocklist&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>BlocklistRule[]</code></li></ul><p>Rules to exclude the selectors for your design system (to narrow down the possibilities). Combining <code>warnExcluded</code> options can also help you identify wrong usages.</p><h3 id="safelist" tabindex="-1">safelist <a class="header-anchor" href="#safelist" aria-label="Permalink to &quot;safelist&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>string[]</code></li></ul><p>Utilities that are always included.</p><h3 id="preprocess" tabindex="-1">preprocess <a class="header-anchor" href="#preprocess" aria-label="Permalink to &quot;preprocess&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>Arrayable&lt;Preprocessor&gt;</code></li></ul><p>Preprocess the incoming utilities, return falsy value to exclude.</p><h3 id="postprocess" tabindex="-1">postprocess <a class="header-anchor" href="#postprocess" aria-label="Permalink to &quot;postprocess&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>Arrayable&lt;Postprocessor&gt;</code></li></ul><p>Postprocess the generate utils object.</p><h3 id="separators" tabindex="-1">separators <a class="header-anchor" href="#separators" aria-label="Permalink to &quot;separators&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>Arrayable&lt;string&gt;</code></li><li><strong>Default:</strong> <code>[&#39;:&#39;, &#39;-&#39;]</code></li></ul><p>Variant separator.</p><h3 id="extractordefault" tabindex="-1">extractorDefault <a class="header-anchor" href="#extractordefault" aria-label="Permalink to &quot;extractorDefault&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>Extractor | null | false</code></li><li><strong>Default:</strong> <code>import(&#39;@unocss/core&#39;).defaultExtractor</code></li></ul><p>Default extractor that are always applied. By default it split the source code by whitespace and quotes.</p><p>It maybe be replaced by preset or user config, only one default extractor can be presented, later one will override the previous one.</p><p>Pass <code>null</code> or <code>false</code> to disable the default extractor.</p><h3 id="autocomplete" tabindex="-1">autocomplete <a class="header-anchor" href="#autocomplete" aria-label="Permalink to &quot;autocomplete&quot;">​</a></h3><p>Additional options for auto complete.</p><h4 id="templates" tabindex="-1">templates <a class="header-anchor" href="#templates" aria-label="Permalink to &quot;templates&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>Arrayable&lt;AutoCompleteFunction | AutoCompleteTemplate&gt;</code></li></ul><p>Custom functions / templates to provide autocomplete suggestions.</p><h4 id="extractors-1" tabindex="-1">extractors <a class="header-anchor" href="#extractors-1" aria-label="Permalink to &quot;extractors&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>Arrayable&lt;AutoCompleteExtractor&gt;</code></li></ul><p>Custom extractors to pickup possible classes and transform class-name style suggestions to the correct format.</p><h4 id="shorthands" tabindex="-1">shorthands <a class="header-anchor" href="#shorthands" aria-label="Permalink to &quot;shorthands&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>Record&lt;string, string | string[]&gt;</code></li></ul><p>Custom shorthands to provide autocomplete suggestions. if values is an array, it will be joined with <code>|</code> and wrapped with <code>()</code>.</p><h3 id="content" tabindex="-1">content <a class="header-anchor" href="#content" aria-label="Permalink to &quot;content&quot;">​</a></h3><p>Options for sources to be extracted as utilities usages.</p><p>Supported sources:</p><ul><li><code>filesystem</code> - extract from file system</li><li><code>plain</code> - extract from plain inline text</li><li><code>pipeline</code> - extract from build tools&#39; transformation pipeline, such as Vite and Webpack</li></ul><p>The usage extracted from each source will be <strong>merged</strong> together.</p><h4 id="filesystem" tabindex="-1">filesystem <a class="header-anchor" href="#filesystem" aria-label="Permalink to &quot;filesystem&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default:</strong> <code>[]</code></li></ul><p>Glob patterns to extract from the file system, in addition to other content sources.</p><p>In dev mode, the files will be watched and trigger HMR.</p><h4 id="inline" tabindex="-1">inline <a class="header-anchor" href="#inline" aria-label="Permalink to &quot;inline&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>string | { code: string; id?: string } | (() =&gt; Awaitable&lt;string | { code: string; id?: string }&gt;)) []</code></li></ul><p>Inline text to be extracted.</p><h4 id="pipeline" tabindex="-1">pipeline <a class="header-anchor" href="#pipeline" aria-label="Permalink to &quot;pipeline&quot;">​</a></h4><p>Filters to determine whether to extract certain modules from the build tools&#39; transformation pipeline.</p><p>Currently only works for Vite and Webpack integration.</p><p>Set <code>false</code> to disable.</p><h5 id="include" tabindex="-1">include <a class="header-anchor" href="#include" aria-label="Permalink to &quot;include&quot;">​</a></h5><ul><li><strong>Type:</strong> <code>FilterPattern</code></li><li><strong>Default:</strong> <code>[/\\.(vue|svelte|[jt]sx|mdx?|astro|elm|php|phtml|html)($|\\?)/]</code></li></ul><p>Patterns that filter the files being extracted. Supports regular expressions and <code>picomatch</code> glob patterns.</p><p>By default, <code>.ts</code> and <code>.js</code> files are NOT extracted.</p><h5 id="exclude" tabindex="-1">exclude <a class="header-anchor" href="#exclude" aria-label="Permalink to &quot;exclude&quot;">​</a></h5><ul><li><strong>Type:</strong> <code>FilterPattern</code></li><li><strong>Default:</strong> <code>[/\\.(css|postcss|sass|scss|less|stylus|styl)($|\\?)/]</code></li></ul><p>Patterns that filter the files NOT being extracted. Supports regular expressions and <code>picomatch</code> glob patterns.</p><p>By default, <code>node_modules</code> and <code>dist</code> are also extracted.</p><h3 id="configresolved" tabindex="-1">configResolved <a class="header-anchor" href="#configresolved" aria-label="Permalink to &quot;configResolved&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>(config: ResolvedConfig) =&gt; void</code></li></ul><p>Hook to modify the resolved config.</p><p>First presets runs first and the user config.</p><h3 id="configfile" tabindex="-1">configFile <a class="header-anchor" href="#configfile" aria-label="Permalink to &quot;configFile&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>string | false</code></li></ul><p>Load from configs files.</p><p>Set <code>false</code> to disable.</p><h3 id="configdeps" tabindex="-1">configDeps <a class="header-anchor" href="#configdeps" aria-label="Permalink to &quot;configDeps&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>string[]</code></li></ul><p>List of files that will also trigger config reloads.</p><h3 id="cli" tabindex="-1">cli <a class="header-anchor" href="#cli" aria-label="Permalink to &quot;cli&quot;">​</a></h3><p>UnoCSS CLI options.</p><h4 id="entry" tabindex="-1">entry <a class="header-anchor" href="#entry" aria-label="Permalink to &quot;entry&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>Arrayable&lt;CliEntryItem&gt;</code></li></ul><p>UnoCSS cli entry points.</p><h5 id="patterns" tabindex="-1">patterns <a class="header-anchor" href="#patterns" aria-label="Permalink to &quot;patterns&quot;">​</a></h5><ul><li><strong>Type:</strong> <code>string[]</code></li></ul><p>Glob patterns to extract from the file system.</p><h5 id="outfile" tabindex="-1">outFile <a class="header-anchor" href="#outfile" aria-label="Permalink to &quot;outFile&quot;">​</a></h5><ul><li><strong>Type:</strong> <code>string</code></li></ul><p>Output file path.</p><h3 id="shortcutslayer" tabindex="-1">shortcutsLayer <a class="header-anchor" href="#shortcutslayer" aria-label="Permalink to &quot;shortcutsLayer&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>&#39;shortcuts&#39;</code></li></ul><p>Layout name of shortcuts.</p><h3 id="envmode" tabindex="-1">envMode <a class="header-anchor" href="#envmode" aria-label="Permalink to &quot;envMode&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>&#39;dev&#39; | &#39;build&#39;</code></li><li><strong>Default:</strong> <code>&#39;build&#39;</code></li></ul><p>Environment mode.</p><h3 id="details" tabindex="-1">details <a class="header-anchor" href="#details" aria-label="Permalink to &quot;details&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>boolean</code></li></ul><p>Expose internal details for debugging / inspecting.</p><h3 id="warn" tabindex="-1">warn <a class="header-anchor" href="#warn" aria-label="Permalink to &quot;warn&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li></ul><p>Emit warning when matched selectors are presented in blocklist.</p>',134),l=[s];function i(n,c,d,u,h,p){return o(),t("div",null,l)}const m=e(r,[["render",i]]);export{f as __pageData,m as default};
